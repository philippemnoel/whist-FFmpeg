# workflows/build-and-publish.yml
#
# Fractal: Build & Publish Fractal FFmpeg
# Build and publish the internal Fractal version of FFmpeg.

name: "Fractal: Build & Publish FFmpeg"

# need to change pull_request to push to master

on:
    workflow_dispatch:
    pull_request:
        branches: [master, phil/ci]
        paths-ignore:
            - "README.md"

jobs:
    build-and-publish-macos-ffmpeg:
        name: Build and Publish FFmpeg for macOS
        runs-on: [macos-10.14]

        steps: 
            - name: Checkout Git Repository
              uses: actions/checkout@v2
              with:
                persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
                fetch-depth: 0 # otherwise, you will fail to push refs to dest repo

            # XCode CLI is already installed, so no need to run `xcode-select --install`

            - name: Install Homebrew
              run: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

            - name: Set proper Homebrew folder permissions for linking
              run: |
                sudo chown -R `whoami`:admin /usr/local/bin
                sudo chown -R `whoami`:admin /usr/local/share
                sudo chown -R `whoami`:admin /usr/local/opt

            - name: Install FFmpeg macOS Dependencies
              run: |
                brew install automake fdk-aac git lame libass libtool libvorbis libvpx \
                opus sdl shtool texi2html theora wget x264 x265 xvid nasm

            # texi2html

            - name: Configure and Make FFmpeg
              run: |
                ./configure \
                --prefix=/usr/local --enable-gpl --enable-nonfree --enable-libass --enable-libfdk-aac --enable-libfreetype \
                --enable-libmp3lame --enable-libtheora --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 \
                --enable-libopus --enable-libxvid --samples=fate-suite \
                && make

            # TODO: find where the .dylibs are, zip them and upload them to S3





    build-and-publish-windows-ffmpeg:
        name: Build and Publish FFmpeg for Windows
        runs-on: [windows-2016]

        steps: 
            - name: Checkout Git Repository
              uses: actions/checkout@v2
              with:
                persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
                fetch-depth: 0 # otherwise, you will fail to push refs to dest repo

            - name: Checkout Media Autobuild Suite
              uses: actions/checkout@v2
              with:
                repository: m-ab-s/media-autobuild_suite
                token: ${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }} 




            # run this from cmd


            # 1- echo 3 to build for 64-bit systems
            # 2- echo 1 to build non-free dependencies
            # 3- echo 2 to NOT build standalone binaries for libraries included in FFmpeg
            # 4- echo 1 to NOT build VP8/9 encoder
            # 5- echo 1 to build aom
            # 6- echo 1 to build rav1e
            # 7- echo 1 to build dav1d
            # 8- echo 1 to build libavif
            # 9- echo 1 to build jpeg-xl
            # 10- echo 4 to build x264 with lib/binary with 8 and 10-bit, and libavformat and ffms2
            # 11- echo 1 to build x265 with lib/binary with Main, Main10 and Main12
            # 12- echo 1 to build Kvazaar (H.265 encoder)
            # 13- echo 1 to build SVT-HEVC (H.265 encoder)
            # 14- echo 2 to NOT build xvc (HEVC and AV1 competitor)
            # 15- echo 2 to NOT build Fraunhofer VVC (H.265 successor enc/decoder)
            # 16- echo 2 to NOT build SVT-AV1 (AV1 encoder)
            # 17- echo 2 to NOT build SVT-VP9 (VP9 encoder)
            # 18- echo 1 to build FLAC (Free Lossless Audio Codec)
            # 19- echo 1 to build FDK-AAC (AAC-LC/HE/HEv2 codec)
            # 20- echo 2 to NOT build FAAC (old, low-quality and non-free AAC-LC codec)
            # 21- echo 2 to NOT build exhale binary (open-source ISO/IEC 23003-3 USAC, xHE-AAC encoder)
            # 22- echo 2 to NOT build mediainfo binaries (Multimedia file information tool)
            # 23- echo 2 to NOT build sox binaries (Sound processing tool)
            # 24- echo 1 to build STATIC FFmpeg libraries
            # 25- echo 1 to "Always build FFmpeg when libraries have been updated" -- this is irrelevant here since GHA VMs are wiped after runs
            # 26- echo 1 to "Choose ffmpeg and mpv optional libraries"
            # 27- echo "c" to continue
            # 28- echo "c" to continue
            # 29- echo 2 to NOT build mp4box (mp4 muxer/toolbox)
            # 30- echo 2 to NOT build rtmpdump binaries (rtmp tools)
            # 31- echo 2 to NOT build static mplayer/mencoder (UNSUPPORTED)
            # 32- echo 1 to build mpv
            # 33- echo 2 to NOT build vlc
            # 34- echo 1 to build bmx
            # 35- echo 2 to NOT build static curl
            # 36- echo 2 to NOT build FFMedia Broadcast binary (UNSUPPORTED)
            # 37- echo 2 to NOT build cyanrip (CLI CD ripper)
            # 38- echo 2 to NOT build redshift (f.lux FOSS clone)
            # 39- echo 2 to NOT build ripgrep (faster grep in Rust)
            # 40- echo 2 to NOT build jq (CLI JSON processor)
            # 41- echo 2 to NOT build jo (CLI JSON from shell)
            # 42- echo 2 to NOT build dssim (multiscale SSIM in Rust)
            # 43- echo 1 to build avs2 (Audio Video Coding Standard Gen2 encoder/decoder)
            # 44- echo 2 to NOT using clang instead of gcc (Recommended)
            # 45- echo 2 to use 2 cores for compilation (GHA VMs have only 2 cores)
            # 46- echo 1 to delete versioned source folders after compile is done
            # 47- echo 1 to strip compiled files binaries
            # 48- echo 2 to NOT pack compiled files
            # 49- echo 1 to write logs of compilation commands
            # 50- echo 2 to NOT create script to update suite files automatically
            # 51- echo 1 to show timestamps of commands during compilation
            # 52- echo 2 to NOT use ccache when compiling
            # 53- echo 1 to disable mintty and print the output to this console
            - name: Run media-autobuild_suite.bat
              run: |
                (echo 3 && \
                 echo 1 && \
                 echo 2 && \
                 echo 2 && \
                 echo 1 && \
                 echo 1 && \
                 echo 1 && \
                 echo 1 && \
                 echo 1 && \
                 echo 4 && \
                 echo 1 && \
                 echo 1 && \
                 echo 1 && \
                 echo 2 && \
                 echo 2 && \
                 echo 2 && \
                 echo 2 && \
                 echo 1 && \
                 echo 1 && \
                 echo 2 && \
                 echo 2 && \
                 echo 2 && \
                 echo 2 && \
                 echo 1 && \
                 echo 1 && \
                 echo 1 && \
                 echo c && \
                 echo c && \
                 echo 2 && \
                 echo 2 && \
                 echo 2 && \
                 echo 1 && \
                 echo 2 && \
                 echo 1 && \
                 echo 2 && \
                 echo 2 && \
                 echo 2 && \
                 echo 2 && \
                 echo 2 && \
                 echo 2 && \
                 echo 2 && \
                 echo 1 && \
                 echo 2 && \
                 echo 2 && \
                 echo 1 && \
                 echo 1 && \
                 echo 2 && \
                 echo 1 && \
                 echo 2 && \
                 echo 2 && \
                 echo 1) | .\media-autobuild_suite.bat
              shell: cmd








    build-and-publish-linux-ffmpeg:
        name: Build and Publish FFmpeg for Linux Ubuntu
        runs-on: [ubuntu-18.04]

        steps: 
            - name: Checkout Git Repository
              uses: actions/checkout@v2
              with:
                persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
                fetch-depth: 0 # otherwise, you will fail to push refs to dest repo

            - name: Install FFmpeg Linux Ubuntu Dependencies
              run: |
                sudo apt-get update -qq && sudo apt-get -y install \
                autoconf \
                automake \
                build-essential \
                cmake \
                git-core \
                libass-dev \
                libfreetype6-dev \
                libgnutls28-dev \
                libsdl2-dev \
                libtool \
                libva-dev \
                libvdpau-dev \
                libvorbis-dev \
                libxcb1-dev \
                libxcb-shm0-dev \
                libxcb-xfixes0-dev \
                pkg-config \
                texinfo \
                wget \
                yasm \
                zlib1g-dev \
                libunistring-dev

            - name: Create FFmpeg Output Directory
              run: mkdir -p ~/ffmpeg_sources ~/bin

            - name: Install FFmpeg Library Dependencies
              run: |
                sudo apt-get update -qq && sudo apt-get -y install \
                nasm \
                libx264-dev \
                libx265-dev libnuma-dev \
                libvpx-dev \
                libfdk-aac-dev \
                libmp3lame-dev \
                libopus-dev

            - name: Install FFmpeg libaom Dependency (AV1 Video Encoder/Decoder)
              run: |                
                cd ~/ffmpeg_sources && \
                git -C aom pull 2> /dev/null || git clone --depth 1 https://aomedia.googlesource.com/aom && \
                mkdir -p aom_build && \
                cd aom_build && \
                PATH="$HOME/bin:$PATH" cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$HOME/ffmpeg_build" -DENABLE_SHARED=off -DENABLE_NASM=on ../aom && \
                PATH="$HOME/bin:$PATH" make && \
                make install

            - name: Install FFmpeg libsvtav1 Dependency (AV1 Video Encoder/Decoder)
              run: |          
                cd ~/ffmpeg_sources && \
                git -C SVT-AV1 pull 2> /dev/null || git clone https://github.com/AOMediaCodec/SVT-AV1.git && \
                mkdir -p SVT-AV1/build && \
                cd SVT-AV1/build && \
                PATH="$HOME/bin:$PATH" cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$HOME/ffmpeg_build" -DCMAKE_BUILD_TYPE=Release -DBUILD_DEC=OFF -DBUILD_SHARED_LIBS=OFF .. && \
                PATH="$HOME/bin:$PATH" make && \
                make install

            # TODO: fix this to use this local FFmpeg rather than download it
            - name: Build FFmpeg
              run: |
                cd ~/ffmpeg_sources && \
                wget -O ffmpeg-snapshot.tar.bz2 https://ffmpeg.org/releases/ffmpeg-snapshot.tar.bz2 && \
                tar xjvf ffmpeg-snapshot.tar.bz2 && \
                cd ffmpeg && \
                PATH="$HOME/bin:$PATH" PKG_CONFIG_PATH="$HOME/ffmpeg_build/lib/pkgconfig" ./configure \
                --prefix="$HOME/ffmpeg_build" \
                --pkg-config-flags="--static" \
                --extra-cflags="-I$HOME/ffmpeg_build/include" \
                --extra-ldflags="-L$HOME/ffmpeg_build/lib" \
                --extra-libs="-lpthread -lm" \
                --bindir="$HOME/bin" \
                --enable-gpl \
                --enable-gnutls \
                --enable-libaom \
                --enable-libass \
                --enable-libfdk-aac \
                --enable-libfreetype \
                --enable-libmp3lame \
                --enable-libopus \
                --enable-libsvtav1 \
                --enable-libvorbis \
                --enable-libvpx \
                --enable-libx264 \
                --enable-libx265 \
                --enable-nonfree && \
                PATH="$HOME/bin:$PATH" make && \
                make install && \
                hash -r



