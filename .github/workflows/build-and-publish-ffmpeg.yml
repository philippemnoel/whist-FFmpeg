# workflows/build-and-publish-ffmpeg.yml
#
# Build & Publish Fractal FFmpeg
# Build and publish the internal Fractal version of FFmpeg by uploading compiled libs to AWS S3.

name: "Build & Publish Fractal FFmpeg"

on:
    pull_request:
        branches:
            - main
        paths-ignore:
            - README.md
    push:
        branches:
            - main
            - djsavvy/upgrade-to-ubuntu-21
        paths-ignore:
            - README.md
    workflow_dispatch:

jobs:
    build-and-publish-fractal-ffmpeg:
        name: ${{ matrix.config.name }}
        runs-on: ${{ matrix.config.os }}

        strategy:
            matrix:
                config:
                    - name: "Build and Publish Fractal FFmpeg on Windows"
                      os: windows-2016 # Same OS as Windows 10
                    - name: "Build and Publish Fractal FFmpeg on macOS"
                      os: macos-10.15 # Xcode and Homebrew come preinstalled
                    - name: "Build and Publish Fractal FFmpeg on Linux Ubuntu"
                      os: ubuntu-20.04

        # Environment variables for the deployment
        env:
            windows-tar-name: fractal-windows-ffmpeg-shared-lib.tar.gz
            windows-build-folder: Windows
            macos-tar-name: fractal-macos-ffmpeg-shared-lib.tar.gz
            macos-build-folder: Darwin
            linux-tar-name: fractal-linux-ffmpeg-shared-lib.tar.gz
            linux-build-folder: Linux
            headers-tar-name: fractal-ffmpeg-headers.tar.gz
            headers-build-folder: include
            s3-bucket-region: us-east-1
            s3-bucket-uri: s3://fractal-protocol-shared-libs

        steps:
            ################################# CONFIG STEPS START ###############################

            - name: On macOS and Linux Ubuntu, Checkout this Git Repository Directly
              if: runner.os == 'macOS' || runner.os == 'Linux'
              uses: actions/checkout@v2

            # media-autobuild_suite needs to be directly in the C:\ drive, as it is very finicky with paths
            - name: On Windows, Git Clone fractal/FFmpeg and fractal/media-autobuild_suite (FFmpeg Windows Compilation Helper Tools) to C:\
              if: runner.os == 'Windows'
              shell: cmd
              run: |
                  REM first, clone m-ab-s/media-autobuild_suite to C:\media-autobuild_suite
                  git clone "https://${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}@github.com/fractal/media-autobuild_suite.git" C:\media-autobuild_suite

                  REM then, clone fractal/FFmpeg to C:\media-autobuild_suite\build\ffmpeg
                  git clone "https://${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}@github.com/fractal/ffmpeg.git" C:\media-autobuild_suite\build\ffmpeg

            # For uploading the compiled libs to AWS S3
            - name: Configure AWS S3 CLI
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.s3-bucket-region }}

            ###################################################################################
            ################################# MACOS STEPS START ###############################

            - name: On macOS, Explicitly Set Proper Homebrew Folder Permissions for Linking FFmpeg Dependencies
              if: runner.os == 'macOS'
              run: |
                  sudo chown -R `whoami`:admin /usr/local/bin
                  sudo chown -R `whoami`:admin /usr/local/share
                  sudo chown -R `whoami`:admin /usr/local/opt

            - name: On macOS, Install macdylibbundler
              if: runner.os == 'macOS'
              run: brew install dylibbundler

            - name: On macOS, Install FFmpeg macOS Dependencies
              if: runner.os == 'macOS'
              run: |
                  brew install \
                  automake fdk-aac git lame libass libtool libvorbis libvpx \
                  opus sdl shtool texi2html theora wget x264 x265 xvid nasm

            # We disable command-line programs and SDL2 since we have our own SDL2 static build, so
            # we only configure the minimum required flags for the Fractal protocol
            - name: On macOS, Configure and Make FFmpeg
              if: runner.os == 'macOS'
              run: |
                  ./configure \
                  --prefix=@loader_path \
                  --libdir=@loader_path \
                  --extra-cflags=-O3 \
                  --enable-gpl \
                  --enable-nonfree \
                  --enable-version3 \
                  --disable-programs \
                  --disable-doc \
                  --disable-debug \
                  --disable-sdl2 \
                  --enable-opengl \
                  --enable-libfdk-aac \
                  --enable-libx264 \
                  --enable-libx265 \
                  --enable-pthreads \
                  --disable-static \
                  --enable-shared \
                  && make

            ###################################################################################
            ############################# LINUX UBUNTU STEPS START ############################

            - name: Build FFmpeg on Linux Ubuntu through Docker
              if: runner.os == 'Linux'
              run: ./docker-build.sh 20

            ###################################################################################
            ################################ WINDOWS STEPS START ##############################

            - name: On Windows, Install CUDA
              if: runner.os == 'Windows'
              working-directory: C:\media-autobuild_suite
              shell: powershell
              env:
                  visual_studio: "Visual Studio 16 2019" # Imported from env in the .ps1 script
                  cuda: "11.3.1" # Imported from env in the .ps1 script
              run: |
                  & "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
                  .\build\ffmpeg\.github\workflows\helpers\install_cuda_windows.ps1
                    if ($?) {
                      # Set paths for subsequent steps, using $env:CUDA_PATH
                      echo "Adding CUDA to CUDA_PATH, CUDA_PATH_X_Y and PATH"
                      echo "CUDA_PATH=$env:CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                      echo "$env:CUDA_PATH_VX_Y=$env:CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                      echo "$env:CUDA_PATH/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
                    }

            - name: On Windows, Verify that NVCC is Installed
              if: runner.os == 'Windows'
              shell: powershell
              run: |
                  nvcc -V
                  ls $env:CUDA_PATH
                  ls $env:CUDA_PATH\bin
                  ls $env:CUDA_PATH\include

            - name: On Windows, Move Preconfigured media-autobuild_suite Config Files Over to C:\media-autobuild_suite/build
              if: runner.os == 'Windows'
              working-directory: C:\media-autobuild_suite
              shell: bash --noprofile --norc -eo pipefail {0}
              run: |
                  cp \
                  build/ffmpeg/.github/workflows/helpers/media-autobuild_suite.ini \
                  build/ffmpeg/.github/workflows/helpers/ffmpeg_options.txt \
                  build/ffmpeg/.github/workflows/helpers/mpv_options.txt \
                  build/ffmpeg/.github/workflows/helpers/bash.sh \
                  build/ffmpeg/.github/workflows/helpers/mingw.sh \
                  build/ffmpeg/.github/workflows/helpers/pacman.sh \
                  build/

            - name: On Windows, build FFmpeg via media-autobuild_suite from C:\ drive
              if: runner.os == 'Windows'
              working-directory: C:\media-autobuild_suite
              shell: cmd
              run: .\media-autobuild_suite.bat "${{ secrets.GHA_USERNAME }}" "${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}"

            ###################################################################################
            ################################# PUBLISH STEPS START #############################

            # Only publish to AWS S3 on Push events (code merged into `main`), PRs only build to test
            - name: Tar FFmpeg Libs and Upload to AWS S3 (Only on Push Events)
              if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
              shell: bash --noprofile --norc -eo pipefail {0}
              run: |
                  if [ "$RUNNER_OS" == "Linux" ]; then
                      # create protocol-compliant lib folder and move libs over
                      mkdir ${{ env.linux-build-folder }}
                      mv docker-builds/* ${{ env.linux-build-folder }}/

                      # change the linking of our own FFmpeg libs to make them work within the Fractal Protocol folder structure
                      patchelf --set-rpath '$ORIGIN' ${{ env.linux-build-folder }}/*

                      # tar and uplaod
                      tar -zcvf ${{ env.linux-tar-name }} ${{ env.linux-build-folder }}
                      aws s3 cp ${{ env.linux-tar-name }} ${{ env.s3-bucket-uri }}/${{ env.linux-tar-name }}
                  elif [ "$RUNNER_OS" == "Windows" ]; then
                      # cd to the right directory
                      cd /c/media-autobuild_suite

                      # create protocol-compliant lib folder and rename & move libs over
                      mkdir ${{ env.windows-build-folder }}
                      mv local64/bin-video/avcodec-59.dll ${{ env.windows-build-folder }}/avcodec-59.dll
                      mv local64/bin-video/avdevice-59.dll ${{ env.windows-build-folder }}/avdevice-59.dll
                      mv local64/bin-video/avfilter-8.dll ${{ env.windows-build-folder }}/avfilter-8.dll
                      mv local64/bin-video/avformat-59.dll ${{ env.windows-build-folder }}/avformat-59.dll
                      mv local64/bin-video/avutil-57.dll ${{ env.windows-build-folder }}/avutil-57.dll
                      mv local64/bin-video/postproc-56.dll ${{ env.windows-build-folder }}/postproc-56.dll
                      mv local64/bin-video/swresample-4.dll ${{ env.windows-build-folder }}/swresample-4.dll
                      mv local64/bin-video/swscale-6.dll ${{ env.windows-build-folder }}/swscale-6.dll
                      mv local64/bin-video/avcodec.lib ${{ env.windows-build-folder }}/avcodec.lib
                      mv local64/bin-video/avdevice.lib ${{ env.windows-build-folder }}/avdevice.lib
                      mv local64/bin-video/avfilter.lib ${{ env.windows-build-folder }}/avfilter.lib
                      mv local64/bin-video/avformat.lib ${{ env.windows-build-folder }}/avformat.lib
                      mv local64/bin-video/avutil.lib ${{ env.windows-build-folder }}/avutil.lib
                      mv local64/bin-video/postproc.lib ${{ env.windows-build-folder }}/postproc.lib
                      mv local64/bin-video/swresample.lib ${{ env.windows-build-folder }}/swresample.lib
                      mv local64/bin-video/swscale.lib ${{ env.windows-build-folder }}/swscale.lib

                      # tar and upload
                      tar -zcvf ${{ env.windows-tar-name }} ${{ env.windows-build-folder }}
                      aws s3 cp ${{ env.windows-tar-name }} ${{ env.s3-bucket-uri }}/${{ env.windows-tar-name }}
                  else
                      # create staging folder for our dylib bundler to use
                      # (important since the bundler expects to resolve between these binaries)
                      mkdir dylib-bundle-staging

                      # remember to move the versioned libavcodec.58.dylib, for example, not the libavcodec.dylib
                      mv lib{av{codec,device,filter,format,util},postproc,sw{resample,scale}}/*.*.dylib dylib-bundle-staging

                      # create protocol-compliant lib folder to put patched binaries in
                      mkdir ${{ env.macos-build-folder }}

                      # mark FFmpeg dependencies (fdk-aac, x264, x265, etc.) as executable and change their linking to work with
                      # our own FFmpeg libs within the Fractal Protocol folder structure
                      # note that printf on bash is /usr/bin/printf, which handles the -x poorly by default
                      dylibbundler \
                        $(printf -- '-x %s ' $(ls dylib-bundle-staging/*.dylib)) \
                        -d ${{ env.macos-build-folder }} \
                        -p "@loader_path" \
                        -b
                      mv dylib-bundle-staging/*.dylib ${{ env.macos-build-folder }}
                      chmod +x ${{ env.macos-build-folder }}/*.dylib

                      # tar and upload
                      tar -zcvf ${{ env.macos-tar-name }} ${{ env.macos-build-folder }}
                      aws s3 cp ${{ env.macos-tar-name }} ${{ env.s3-bucket-uri }}/${{ env.macos-tar-name }}
                  fi

            # Only run once, as headers are identical on every OS, we run on macOS to generate version headers, which
            # don't generate properly on Linux
            - name: Tar FFmpeg headers and Upload to AWS S3 (Only on Push Events)
              if: ${{ (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && runner.os == 'macOS' }}
              run: |
                  # create protocol-compliant headers folder and subfolders
                  mkdir -p ${{ env.headers-build-folder }}/{libavcodec,libavdevice,libavfilter,libavformat,libavutil,libpostproc,libswresample,libswscale}

                  # move select header files over to tar, only the ones needed
                  # libavcodec
                  mv \
                  libavcodec/ac3_parser.h \
                  libavcodec/adts_parser.h \
                  libavcodec/avcodec.h \
                  libavcodec/avdct.h \
                  libavcodec/avfft.h \
                  libavcodec/bsf.h \
                  libavcodec/codec.h \
                  libavcodec/codec_desc.h \
                  libavcodec/codec_id.h \
                  libavcodec/codec_par.h \
                  libavcodec/d3d11va.h \
                  libavcodec/dirac.h \
                  libavcodec/dv_profile.h \
                  libavcodec/dxva2.h \
                  libavcodec/jni.h \
                  libavcodec/mediacodec.h \
                  libavcodec/packet.h \
                  libavcodec/qsv.h \
                  libavcodec/vaapi_decode.h \
                  libavcodec/vaapi_encode.h \
                  libavcodec/vaapi_hevc.h \
                  libavcodec/vdpau.h \
                  libavcodec/version.h \
                  libavcodec/videotoolbox.h \
                  libavcodec/vorbis_parser.h \
                  libavcodec/xvmc.h \
                  libavcodec/defs.h \
                  ${{ env.headers-build-folder }}/libavcodec/

                  # libavdevice
                  mv \
                  libavdevice/avdevice.h \
                  libavdevice/version.h \
                  ${{ env.headers-build-folder }}/libavdevice/

                  # libavfilter
                  mv \
                  libavfilter/avfilter.h \
                  libavfilter/buffersink.h \
                  libavfilter/buffersrc.h \
                  libavfilter/vaapi_vpp.h \
                  libavfilter/version.h \
                  ${{ env.headers-build-folder }}/libavfilter/

                  # libavformat
                  mv \
                  libavformat/avformat.h \
                  libavformat/avio.h \
                  libavformat/version.h \
                  ${{ env.headers-build-folder }}/libavformat/

                  # libavutil
                  mv \
                  libavutil/adler32.h \
                  libavutil/aes.h \
                  libavutil/aes_ctr.h \
                  libavutil/attributes.h \
                  libavutil/audio_fifo.h \
                  libavutil/avassert.h \
                  libavutil/avconfig.h \
                  libavutil/avstring.h \
                  libavutil/avutil.h \
                  libavutil/base64.h \
                  libavutil/blowfish.h \
                  libavutil/bprint.h \
                  libavutil/bswap.h \
                  libavutil/buffer.h \
                  libavutil/camellia.h \
                  libavutil/cast5.h \
                  libavutil/channel_layout.h \
                  libavutil/common.h \
                  libavutil/cpu.h \
                  libavutil/crc.h \
                  libavutil/des.h \
                  libavutil/dict.h \
                  libavutil/display.h \
                  libavutil/downmix_info.h \
                  libavutil/encryption_info.h \
                  libavutil/error.h \
                  libavutil/eval.h \
                  libavutil/fifo.h \
                  libavutil/file.h \
                  libavutil/frame.h \
                  libavutil/hash.h \
                  libavutil/hdr_dynamic_metadata.h \
                  libavutil/hmac.h \
                  libavutil/hwcontext.h \
                  libavutil/hwcontext_cuda.h \
                  libavutil/hwcontext_d3d11va.h \
                  libavutil/hwcontext_drm.h \
                  libavutil/hwcontext_dxva2.h \
                  libavutil/hwcontext_mediacodec.h \
                  libavutil/hwcontext_qsv.h \
                  libavutil/hwcontext_vaapi.h \
                  libavutil/hwcontext_vdpau.h \
                  libavutil/hwcontext_videotoolbox.h \
                  libavutil/imgutils.h \
                  libavutil/intfloat.h \
                  libavutil/intreadwrite.h \
                  libavutil/lfg.h \
                  libavutil/log.h \
                  libavutil/lzo.h \
                  libavutil/macros.h \
                  libavutil/mastering_display_metadata.h \
                  libavutil/mathematics.h \
                  libavutil/md5.h \
                  libavutil/mem.h \
                  libavutil/motion_vector.h \
                  libavutil/murmur3.h \
                  libavutil/opt.h \
                  libavutil/parseutils.h \
                  libavutil/pixdesc.h \
                  libavutil/pixelutils.h \
                  libavutil/pixfmt.h \
                  libavutil/random_seed.h \
                  libavutil/rational.h \
                  libavutil/rc4.h \
                  libavutil/replaygain.h \
                  libavutil/ripemd.h \
                  libavutil/samplefmt.h \
                  libavutil/sha.h \
                  libavutil/sha512.h \
                  libavutil/spherical.h \
                  libavutil/stereo3d.h \
                  libavutil/tea.h \
                  libavutil/threadmessage.h \
                  libavutil/time.h \
                  libavutil/timecode.h \
                  libavutil/timestamp.h \
                  libavutil/tree.h \
                  libavutil/twofish.h \
                  libavutil/tx.h \
                  libavutil/version.h \
                  libavutil/xtea.h \
                  ${{ env.headers-build-folder }}/libavutil/

                  # libpostproc
                  mv \
                  libpostproc/postprocess.h \
                  libpostproc/version.h \
                  ${{ env.headers-build-folder }}/libpostproc/

                  # libswresample
                  mv \
                  libswresample/swresample.h \
                  libswresample/version.h \
                  ${{ env.headers-build-folder }}/libswresample/

                  # libswscale
                  mv \
                  libswscale/swscale.h \
                  libswscale/version.h \
                  ${{ env.headers-build-folder }}/libswscale/

                  # tar and upload
                  tar -zcvf ${{ env.headers-tar-name }} include
                  aws s3 cp ${{ env.headers-tar-name }} ${{ env.s3-bucket-uri }}/${{ env.headers-tar-name }}

            ###################################################################################

            - name: Notify Slack on Workflow Error (Only on Push Events)
              if: ${{ (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && failure() }}
              shell: bash --noprofile --norc -eo pipefail {0}
              run: |
                  curl -X POST \
                  --data-urlencode "payload={\"channel\": \"#alerts-prod\", \"username\": \"Fractal Bot\", \"text\": \"@releases :rotating_light: Failed to deploy \`FFmpeg\` Shared Libraries to AWS S3, investigate immediately :rotating_light:\", \"icon_emoji\": \":fractal:\"}" \
                  ${{ secrets.SLACK_HOOKS_ENDPOINT }}

    notify-slack:
        name: Notify Slack
        needs: [build-and-publish-fractal-ffmpeg]
        if: ${{ (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && success() }}
        runs-on: ubuntu-20.04
        steps:
            - name: Notify Slack
              run: |
                  curl -X POST \
                  --data-urlencode "payload={\"channel\": \"#alerts-prod\", \"username\": \"Fractal Bot\", \"text\": \"Fractal \`FFmpeg\` Shared Libraries Deployed to Production via Upload to AWS S3\", \"icon_emoji\": \":fractal:\"}" \
                  ${{ secrets.SLACK_HOOKS_ENDPOINT }}
