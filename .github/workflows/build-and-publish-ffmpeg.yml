# workflows/build-and-publish.yml
#
# Build & Publish Fractal FFmpeg
# Build and publish the internal Fractal version of FFmpeg.

name: "Build & Publish Fractal FFmpeg"

on:
  push:
    branches: [master, phil/ci]
    paths-ignore:
      - "README.md"
  workflow_dispatch:

jobs:
  build-and-publish-fractal-ffmpeg:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    # Platforms to build on/for
    strategy:
      matrix:
        config:
          - name: "Build and Publish Fractal FFmpeg on Windows"
            os: windows-2016
          # - name: "Build and Publish Fractal FFmpeg on macOS"
          #   os: macos-10.14 # Xcode and Homebrew preinstalled
          # - name: "Build and Publish Fractal FFmpeg on Linux Ubuntu"
          #   os: ubuntu-18.04
          #   emscripten-builder: false
          # - name: "Build and Publish Fractal FFmpeg for Emscripten"
          #   os: ubuntu-18.04
          #   emscripten-builder: true

    env:
      windows-tar-name: fractal-windows-ffmpeg-static-lib.tar.gz
      windows-build-folder: Windows
      macos-tar-name: fractal-macos-ffmpeg-static-lib.tar.gz
      macos-build-folder: Darwin
      linux-tar-name: fractal-linux-ffmpeg-static-lib.tar.gz
      linux-build-folder: Linux
      emscripten-tar-name: fractal-emscripten-ffmpeg-lib.tar.gz
      emscripten-build-folder: Web
      headers-tar-name: fractal-ffmpeg-headers.tar.gz
      headers-build-folder: include
      s3-bucket-region: us-east-1
      s3-bucket-uri: s3://fractal-protocol-shared-libs

    steps:
      - name: On macOS and Linux Ubuntu, Checkout this Git Repository Directly
        if: runner.os == 'macOS' || runner.os == 'Linux'
        uses: actions/checkout@v2

      - name: On Windows, Checkout Media Autobuild Suite Instead (FFmpeg Windows Compilation Helper Tools)
        if: runner.os == 'Windows'
        uses: actions/checkout@v2
        with:
          repository: m-ab-s/media-autobuild_suite
          token: ${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}
          path: media-autobuild_suite

      # To publish FFmpeg builds to AWS S3
      - name: Configure AWS S3 CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.s3-bucket-region }}

      ################################# MACOS STEPS START ###############################

      - name: On macOS, Explicitly Set Proper Homebrew Folder Permissions for Linking FFmpeg Dependencies
        if: runner.os == 'macOS'
        shell: bash
        run: |
          sudo chown -R `whoami`:admin /usr/local/bin
          sudo chown -R `whoami`:admin /usr/local/share
          sudo chown -R `whoami`:admin /usr/local/opt

      - name: On macOS, Install FFmpeg macOS Dependencies
        if: runner.os == 'macOS'
        shell: bash
        run: |
          brew install \
          automake fdk-aac git lame libass libtool libvorbis libvpx \
          opus sdl shtool texi2html theora wget x264 x265 xvid nasm

      # We disable commandline programs and SDL2 since we have our own SDL2 static build
      # macOS hardware acceleration libraries (Videotoolbox, Audiotoolbox) are enabled by default
      - name: On macOs, Configure and Make FFmpeg # only configure the minimum required flags for the Fractal protocol
        if: runner.os == 'macOS'
        shell: bash
        run: |
          ./configure \
          --prefix=/usr/local --enable-gpl --enable-nonfree --enable-version3 \
          --disable-programs --disable-doc --disable-debug --disable-sdl2 \
          --enable-opengl --enable-libfdk-aac --enable-libx264 --enable-libx265 \
          && make

      ################################# MACOS STEPS END #################################

      ############################# LINUX UBUNTU STEPS START ############################

      - name: Build FFmpeg on Linux Ubuntu 18.04 through Docker
        if: runner.os == 'Linux' && !matrix.config.emscripten-builder
        shell: bash
        run: |
          # export environment variable
          echo "EMSCRIPTEN_BUILDER=false" >> $GITHUB_ENV

          # build
          ./docker-build.sh 18

      ############################# LINUX UBUNTU STEPS END ##############################

      ############################## EMSCRIPTEN STEPS START #############################

      - name: Build FFmpeg Targeting Emscripten through Docker
        if: runner.os == 'Linux' && matrix.config.emscripten-builder
        shell: bash
        run: |
          # export environment variable
          echo "EMSCRIPTEN_BUILDER=true" >> $GITHUB_ENV

          # build
          ./docker-emcc-build

      ############################## EMSCRIPTEN STEPS END ###############################

      ################################ WINDOWS STEPS START ##############################

      - name: On Windows, Git Clone the fractal/FFmpeg Repository Within media-autobuild_suite/build/
        if: runner.os == 'Windows'
        shell: bash
        working-directory: media-autobuild_suite/build
        run: git clone "https://${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}@github.com/fractal/ffmpeg.git"






      # - name: On Windows, Move Preconfigured media-autobuild_suite Config Files Over to media-autobuild_suite/build
      #   if: runner.os == 'Windows'
      #   shell: bash
      #   working-directory: media-autobuild_suite
      #   run: |
      #     cp \
      #     build/ffmpeg/.github/workflows/helpers/ffmpeg_options.txt \
      #     build/ffmpeg/.github/workflows/helpers/mpv_options.txt \
      #     build/ffmpeg/.github/workflows/helpers/media-autobuild_suite.ini \
      #     build/ffmpeg/.github/workflows/helpers/bash.sh \
      #     build/ffmpeg/.github/workflows/helpers/pacman.sh \
      #     build/ffmpeg/.github/workflows/helpers/mingw.sh \
      #     build/





      # Need to move closer to root since media-autobuild_suite is finicky with paths
      - name: On Windows, Move media-autobuild_suite to Root and Build FFmpeg via media-autobuild_suite
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          move media-autobuild_suite D:\
          cd D:\media-autobuild_suite
          .\media-autobuild_suite.bat
      



      - name: Log stuff
        if: always()
        shell: bash
        run: |
          ls
          echo ====
          ls build
          echo ====
          ls /build







      ################################ WINDOWS STEPS END ################################

      - name: Tar FFmpeg Libs and Upload to AWS S3
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
              if [ "$EMSCRIPTEN_BUILDER" == "true" ]; then # Emscripten libs
                # create protocol-compliant lib folder and move libs over
                mkdir ${{ env.emscripten-build-folder }}
                mv \
                libswresample/libswresample.a \
                libavfilter/libavfilter.a \
                libavformat/libavformat.a \
                libavutil/libavutil.a \
                libswscale/libswscale.a \
                libavcodec/libavcodec.a \
                ${{ env.emscripten-build-folder }}

                # tar and uplaod
                tar -zcvf ${{ env.emscripten-tar-name }} ${{ env.emscripten-build-folder }}
                aws s3 cp ${{ env.emscripten-tar-name }} ${{ env.s3-bucket-uri }}/${{ env.emscripten-tar-name }}
              else # Ubuntu libs
                # create protocol-compliant lib folder and move libs over
                mkdir ${{ env.linux-build-folder }}
                mv docker-builds/* ${{ env.linux-build-folder }}/

                # tar and uplaod
                tar -zcvf ${{ env.linux-tar-name }} ${{ env.linux-build-folder }}
                aws s3 cp ${{ env.linux-tar-name }} ${{ env.s3-bucket-uri }}/${{ env.linux-tar-name }}
              fi
          elif [ "$RUNNER_OS" == "Windows" ]; then




              # TODO
              tar -zcvf ${{ env.windows-tar-name }} SDL2-static.lib
              aws s3 cp ${{ env.windows-tar-name }} ${{ env.s3-bucket-uri }}/${{ env.windows-tar-name }}

              











          else
              # create protocol-compliant lib folder and move libs over
              mkdir ${{ env.macos-build-folder }}
              mv libavcodec/libavcodec.a ${{ env.macos-build-folder }}/libavcodec.a
              mv libavdevice/libavdevice.a ${{ env.macos-build-folder }}/libavdevice.a
              mv libavfilter/libavfilter.a ${{ env.macos-build-folder }}/libavfilter.a
              mv libavformat/libavformat.a ${{ env.macos-build-folder }}/libavformat.a
              mv libavutil/libavutil.a ${{ env.macos-build-folder }}/libavutil.a
              mv libpostproc/libpostproc.a ${{ env.macos-build-folder }}/libpostproc.a
              mv libswresample/libswresample.a ${{ env.macos-build-folder }}/libswresample.a
              mv libswscale/libswscale.a ${{ env.macos-build-folder }}/libswscale.a

              # tar and uplaod
              tar -zcvf ${{ env.macos-tar-name }} ${{ env.macos-build-folder }}
              aws s3 cp ${{ env.macos-tar-name }} ${{ env.s3-bucket-uri }}/${{ env.macos-tar-name }}
          fi

      - name: Tar FFmpeg headers and Upload to AWS S3
        if: runner.os == 'Linux' && !matrix.config.emscripten-builder # Only run once, as headers are identical on every OS
        shell: bash
        run: |
          # create protocol-compliant headers folder and subfolders
          mkdir -p ${{ env.headers-build-folder }}/{libavcodec,libavdevice,libavfilter,libavformat,libavutil,libpostproc,libswresample,libswscale}

          # move select header files over to tar, only the ones needed
          # libavcodec
          mv \
          libavcodec/ac3_parser.h \
          libavcodec/adts_parser.h \
          libavcodec/avcodec.h \
          libavcodec/avdct.h \
          libavcodec/avfft.h \
          libavcodec/d3d11va.h \
          libavcodec/dirac.h \
          libavcodec/dv_profile.h \
          libavcodec/dxva2.h \
          libavcodec/jni.h \
          libavcodec/mediacodec.h \
          libavcodec/qsv.h \
          libavcodec/vaapi.h \
          libavcodec/vdpau.h \
          libavcodec/version.h \
          libavcodec/videotoolbox.h \
          libavcodec/vorbis_parser.h \
          libavcodec/xvmc.h \
          ${{ env.headers-build-folder }}/libavcodec/

          # libavdevice
          mv \
          libavdevice/avdevice.h \
          libavdevice/version.h \
          ${{ env.headers-build-folder }}/libavdevice/

          # libavfilter
          mv \
          libavfilter/avfilter.h \
          libavfilter/buffersink.h \
          libavfilter/buffersrc.h \
          libavfilter/version.h \
          ${{ env.headers-build-folder }}/libavfilter/

          # libavformat
          mv \
          libavformat/avformat.h \
          libavformat/avio.h \
          libavformat/version.h \
          ${{ env.headers-build-folder }}/libavformat/

          # libavutil
          mv \
          libavutil/adler32.h \
          libavutil/aes.h \
          libavutil/aes_ctr.h \
          libavutil/attributes.h \
          libavutil/audio_fifo.h \
          libavutil/avassert.h \
          libavutil/avstring.h \
          libavutil/avutil.h \
          libavutil/base64.h \
          libavutil/blowfish.h \
          libavutil/bprint.h \
          libavutil/bswap.h \
          libavutil/buffer.h \
          libavutil/camellia.h \
          libavutil/cast5.h \
          libavutil/channel_layout.h \
          libavutil/common.h \
          libavutil/cpu.h \
          libavutil/crc.h \
          libavutil/des.h \
          libavutil/dict.h \
          libavutil/display.h \
          libavutil/downmix_info.h \
          libavutil/encryption_info.h \
          libavutil/error.h \
          libavutil/eval.h \
          libavutil/fifo.h \
          libavutil/file.h \
          libavutil/frame.h \
          libavutil/hash.h \
          libavutil/hdr_dynamic_metadata.h \
          libavutil/hmac.h \
          libavutil/hwcontext.h \
          libavutil/hwcontext_cuda.h \
          libavutil/hwcontext_d3d11va.h \
          libavutil/hwcontext_drm.h \
          libavutil/hwcontext_dxva2.h \
          libavutil/hwcontext_mediacodec.h \
          libavutil/hwcontext_qsv.h \
          libavutil/hwcontext_vaapi.h \
          libavutil/hwcontext_vdpau.h \
          libavutil/hwcontext_videotoolbox.h \
          libavutil/imgutils.h \
          libavutil/intfloat.h \
          libavutil/intreadwrite.h \
          libavutil/lfg.h \
          libavutil/log.h \
          libavutil/lzo.h \
          libavutil/macros.h \
          libavutil/mastering_display_metadata.h \
          libavutil/mathematics.h \
          libavutil/md5.h \
          libavutil/mem.h \
          libavutil/motion_vector.h \
          libavutil/murmur3.h \
          libavutil/opt.h \
          libavutil/parseutils.h \
          libavutil/pixdesc.h \
          libavutil/pixelutils.h \
          libavutil/pixfmt.h \
          libavutil/random_seed.h \
          libavutil/rational.h \
          libavutil/rc4.h \
          libavutil/replaygain.h \
          libavutil/ripemd.h \
          libavutil/samplefmt.h \
          libavutil/sha.h \
          libavutil/sha512.h \
          libavutil/spherical.h \
          libavutil/stereo3d.h \
          libavutil/tea.h \
          libavutil/threadmessage.h \
          libavutil/time.h \
          libavutil/timecode.h \
          libavutil/timestamp.h \
          libavutil/tree.h \
          libavutil/twofish.h \
          libavutil/tx.h \
          libavutil/version.h \
          libavutil/xtea.h \
          ${{ env.headers-build-folder }}/libavutil/

          # libpostproc
          mv \
          libpostproc/postprocess.h \
          libpostproc/version.h \
          ${{ env.headers-build-folder }}/libpostproc/

          # libswresample
          mv \
          libswresample/swresample.h \
          libswresample/version.h \
          ${{ env.headers-build-folder }}/libswresample/

          # libswscale
          mv \
          libswscale/swscale.h \
          libswscale/version.h \
          ${{ env.headers-build-folder }}/libswscale/

          # tar and upload
          tar -zcvf ${{ env.headers-tar-name }} include
          aws s3 cp ${{ env.headers-tar-name }} ${{ env.s3-bucket-uri }}/${{ env.headers-tar-name }}

  notify-slack:
    name: Notify Slack
    needs: [build-and-publish-fractal-ffmpeg]
    if: success()
    runs-on: ubuntu-20.04

    steps:
      - name: Notify Slack
        run: |
          curl -X POST \
          --data-urlencode "payload={\"channel\": \"#alerts\", \"username\": \"Fractal Bot\", \"text\": \"Fractal FFmpeg Static Build Deployed to Production via Upload to AWS S3.\", \"icon_emoji\": \":fractal:\"}" \
          ${{ secrets.SLACK_HOOKS_ENDPOINT }}
